services:
  # 1. Datenbank
  postgres-db:
    image: postgres:14-alpine
    container_name: mc-bot-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE} # Hinzugef√ºgt, damit Keycloak die DB findet
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal-bot-network

  # 2. Keycloak Identity Management
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.4
    container_name: mc-bot-keycloak
    restart: always
    command: start
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: ${KC_HOSTNAME}

      KC_DB: postgres
      KC_DB_URL_HOST: postgres-db
      KC_DB_URL_DATABASE: ${DB_DATABASE}
      KC_DB_USERNAME: ${DB_USER}
      KC_DB_PASSWORD: ${DB_PASSWORD}
      KC_DB_SCHEMA: public

      KC_PROXY: "x-forwarded"
      KC_HTTP_ENABLED: "true"

    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - internal-bot-network
      - proxy-network


  # 3. Ihr Backend-Service
  backend:
    image: ${DOCKER_USER}/bot-backend:latest # <-- IHR BACKEND IMAGE
    container_name: mc-bot-backend
    restart: always
    environment:
      DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@postgres-db:5432/${DB_DATABASE}"
      KEYCLOAK_URL: ${BACKEND_KEYCLOAK_URL}
      KEYCLOAK_REALM: ${BACKEND_KEYCLOAK_REALM}
      BACKEND_KEYCLOAK_CLIENT_ID: ${BACKEND_KEYCLOAK_CLIENT_ID}
    depends_on:
      - keycloak
    networks:
      - internal-bot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 10s

  # 4. Ihr Frontend-Service (mit Nginx)
  frontend:
    image: ${DOCKER_USER}/bot-frontend:latest # <-- IHR FRONTEND IMAGE
    container_name: mc-bot-frontend
    restart: always
    depends_on:
     backend:
       condition: service_healthy
    networks:
      - internal-bot-network
      - proxy-network

volumes:
  postgres-data:

networks:
  internal-bot-network:
    driver: bridge
  proxy-network:
    external: true